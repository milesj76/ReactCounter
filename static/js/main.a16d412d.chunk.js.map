{"version":3,"sources":["components/counter/Count.js","components/counter/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Count","count","className","Counter","useState","title","setTitle","setCount","increment","setIncrement","type","onClick","value","onChange","e","target","Number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAQeA,EAND,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACb,OACI,mBAAGC,UAAU,QAAb,SAAsBD,KCiCfE,EAlCC,WAAO,IAAD,EACQC,mBAAS,kBADjB,mBACXC,EADW,KACJC,EADI,OAEQF,mBAAS,GAFjB,mBAEXH,EAFW,KAEJM,EAFI,OAGgBH,mBAAS,GAHzB,mBAGXI,EAHW,KAGAC,EAHA,KASlB,OAJID,EAAY,GACZC,EAAa,GAIb,sBAAKP,UAAU,oBAAf,UACI,6BAAKG,IACL,cAAC,EAAD,CAAOJ,MAAOA,IACd,sBAAKC,UAAU,qBAAf,UACI,wBAAQQ,KAAK,SAASR,UAAU,cAAcS,QAAS,kBAAMJ,EAASN,EAAQO,IAA9E,eACA,wBAAQE,KAAK,SAASR,UAAU,gBAAgBS,QAAS,kBAAMJ,EAAS,IAAxE,mBACA,wBAAQG,KAAK,SAASR,UAAU,cAAcS,QAAS,kBAAMJ,EAASC,EAAYP,IAAlF,kBAEJ,sBAAKC,UAAU,mBAAf,UACI,uBAAMA,UAAU,6BAAhB,UACI,uCAAa,uBAAOA,UAAU,GAAGU,MAAOP,EAAOQ,SAAU,SAACC,GAAD,OAAOR,EAASQ,EAAEC,OAAOH,aAEtF,sBAAKV,UAAU,6BAAf,UACI,4CAAkB,uBAAOQ,KAAK,SAASE,MAAOJ,EAAWK,SAAU,SAACC,GAAD,OAAOL,EAAaO,OAAOF,EAAEC,OAAOH,cAE3G,sBAAKV,UAAU,6BAAf,UACI,wBAAQQ,KAAK,SAASR,UAAU,cAAcS,QAAS,kBAAMF,EAAaD,EAAY,IAAtF,eACA,wBAAQE,KAAK,SAASR,UAAU,cAAcS,QAAS,kBAAMF,EAAaD,EAAY,IAAtF,yBClBLS,MATf,WACE,OACE,sBAAKf,UAAU,MAAf,UACE,0DACA,cAAC,EAAD,QCKSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a16d412d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Count = ({ count }) => {\r\n    return (\r\n        <p className=\"count\">{count}</p>\r\n    )\r\n}\r\n\r\nexport default Count","import React, { useState, useEffect } from 'react';\r\nimport Count from './Count';\r\n\r\nconst Counter = () => {\r\n    const [title, setTitle] = useState('Custom Counter');\r\n    const [count, setCount] = useState(0);\r\n    const [increment, setIncrement] = useState(1);\r\n\r\n    if (increment < 1) {\r\n        setIncrement(1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"counter-container\">\r\n            <h2>{title}</h2>\r\n            <Count count={count} />\r\n            <div className=\"counter-controller\">\r\n                <button type=\"button\" className=\"btn btn-dec\" onClick={() => setCount(count - increment)}>-</button>\r\n                <button type=\"button\" className=\"btn btn-reset\" onClick={() => setCount(0)}>Reset</button>\r\n                <button type=\"button\" className=\"btn btn-inc\" onClick={() => setCount(increment + count)}>+</button>\r\n            </div>\r\n            <div className=\"counter-settings\">\r\n                <form className=\"settings-row settings-row2\">\r\n                    <p>Name: </p><input className=\"\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n                </form>\r\n                <div className=\"settings-row settings-row2\">\r\n                    <p>Increment: </p><input type=\"number\" value={increment} onChange={(e) => setIncrement(Number(e.target.value))} />\r\n                </div>\r\n                <div className=\"settings-row settings-btns\">\r\n                    <button type=\"button\" className=\"btn btn-dec\" onClick={() => setIncrement(increment - 1)}>-</button>\r\n                    <button type=\"button\" className=\"btn btn-inc\" onClick={() => setIncrement(increment + 1)}>+</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","import './App.css';\r\nimport Counter from './components/counter/Counter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Custom Counter React App</h1>\r\n      <Counter />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}